name: Pull request workflow

on:
  pull_request:
    branches:
      - main


jobs:

#  test-run:
#    name: Run tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          distribution: temurin
#          java-version: 17
#          cache: gradle
#      - name: Setup Gradle
#        uses: gradle/gradle-build-action@v2
#      - name: Run gradlew test
#        run: ./gradlew test
#      - name: Archive test artifact
#        if: success() || failure()
#        uses: actions/upload-artifact@v3
#        with:
#          name: test-report
#          path: build/test-results/test/TEST-*.xml
#
#  filesystem-scan:
#    # https://aquasecurity.github.io/trivy/v0.40/docs/target/filesystem/
#    name: Scan filesystem with Trivy
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Run Trivy vulnerability scanner in repo mode
#        uses: aquasecurity/trivy-action@master
#        with:
#          scan-type: 'fs'
#          format: 'sarif'
#          output: 'trivy-sf-scan-results.sarif'
#          severity: 'MEDIUM,HIGH,CRITICAL'
#          exit-code: '1'
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v2
#        if: success() || failure()
#        with:
#          sarif_file: 'trivy-sf-scan-results.sarif'

  image:
    name: Build, scan and publish docker image
#    needs: [test-run,filesystem-scan]
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ghcr.io
      DOCKER_REPOSITORY: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - uses: tj-actions/branch-names@v6
        name: Get branch name
        id: branch-name
      - name: Create image tags
        run: |
          branch_prefix=$(echo ${{steps.branch-name.outputs.current_branch }} | cut -d / -f 1)
          short_sha=$(echo ${{ github.event.pull_request.head.sha }} |  cut -c1-7 )
          tags=(
            $branch_prefix-$short_sha
          )
          echo "IMAGE_TAGS=`echo ${tags[*]}`" >> $GITHUB_ENV
      - name: Build image
        run: |
          ./gradlew bootBuildImage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set full image name
        run: |
          echo "IMAGE_NAME=`echo $(docker images --format "{{.Repository}}:{{.Tag}}" | grep -m1 ${{env.DOCKER_REPOSITORY}})`" >> $GITHUB_ENV
      - name: Test
        run:
          env
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{env.IMAGE_NAME}}
          format: 'sarif'
          output: 'trivy-image-scan-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'MEDIUM,HIGH,CRITICAL'
      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: 'trivy-image-scan-results.sarif'
      - name: Publish image
        run: |
          docker push --all-tags ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_REPOSITORY}}
