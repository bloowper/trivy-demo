name: Pull request workflow

on:
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_REPOSITORY: trivy-demo

jobs:

  test-run:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Run gradlew test
        run: ./gradlew test
      - name: Archive test artifact
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: build/test-results/test/TEST-*.xml

  filesystem-scan:
    # https://aquasecurity.github.io/trivy/v0.40/docs/target/filesystem/
    name: Scan filesystem with Trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-sf-scan-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'
          exit-code: '1'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: 'trivy-sf-scan-results.sarif'

  image:
    name: Build, scan and publish docker image
    needs: [test-run,filesystem-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build image
        run: |
          echo $DOCKER_REGISTRY
          echo $DOCKER_REPOSITORY
          echo $IMAGE_TAGS
          ./gradlew bootBuildImage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish image
        run: |
          image=$(docker images --format "{{.Repository}}" | grep -m1 ${{env.DOCKER_REPOSITORY}})
          docker push --all-tags $image
